#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const blue_tape_1 = __importDefault(require("blue-tape"));
const puppet_manager_1 = require("./puppet-manager");
blue_tape_1.default('resolve an unsupported puppet name', (t) => __awaiter(this, void 0, void 0, function* () {
    try {
        yield puppet_manager_1.PuppetManager.resolve('fasdfsfasfsfdfs');
        t.fail('should reject');
    }
    catch (e) {
        t.pass('reject when options is a string: ' + e);
    }
    try {
        yield puppet_manager_1.PuppetManager.resolve({ puppet: 'fadfdsafa' });
        t.fail('should reject');
    }
    catch (e) {
        t.pass('reject when options.puppet is unknown: ' + e);
    }
    try {
        yield puppet_manager_1.PuppetManager.resolve({ puppet: 'mock' });
        t.pass('should allow "mock" as puppet name');
    }
    catch (e) {
        t.fail('should pass "mock" as puppet name');
    }
}));
//# sourceMappingURL=puppet-manager.spec.js.map