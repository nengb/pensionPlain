#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const blue_tape_1 = __importDefault(require("blue-tape"));
const net_1 = __importDefault(require("net"));
const get_port_1 = require("./get-port");
blue_tape_1.default('getPort() for an available socket port', (t) => __awaiter(this, void 0, void 0, function* () {
    let port = yield get_port_1.getPort();
    let ttl = 17;
    const serverList = [];
    while (ttl-- > 0) {
        try {
            const server = net_1.default.createServer(socket => {
                console.log(socket);
            });
            yield new Promise(r => server.listen(port, r));
            serverList.push(server);
            port = yield get_port_1.getPort();
        }
        catch (e) {
            t.fail('should not exception: ' + e.message + ', ' + e.stack);
        }
    }
    serverList.map(server => server.close());
    t.pass('should has no exception after loop test');
}));
//# sourceMappingURL=get-port.spec.js.map